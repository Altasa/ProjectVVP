from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from proreceip import findreceip
from random import randint
from time import sleep
# –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∞–¥—Ä–µ—Å–æ–≤ —Ä–µ—Ü–µ–ø—Ç–æ–≤
import proreceip
# –°—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —á–∞—Ç–∞—Ö
import pickle
databaseinit=open("./Data/chatids.dat", "rb")
chatids=pickle.load(databaseinit)

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ ConversationHandler.
CHOOSING_CATEGORY, CATEGORY, COOKING = range(0, 3)

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
from gen_buttons import buttons

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
def category_markups(category: str = "default") -> InlineKeyboardMarkup:
    # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–¥. –ü–æ–¥—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏...
    def algorithm(index: int) -> list:
        category_keyboard = []
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —á—ë—Ç–Ω–æ–µ:
        if len(buttons[index]) % 2 == 0:
                for i in range(0, len(buttons[index]), 2):
                    category_keyboard.append([InlineKeyboardButton(buttons[index][i], callback_data = buttons[index][i]),
                                InlineKeyboardButton(buttons[index][i+1], callback_data = buttons[index][i+1])])
                # –ï—Å–ª–∏ –ù–ï –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏), –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–∞—è", —Ç.–µ. –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
                if index != 0:
                    category_keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="Main")])
                return category_keyboard
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á—ë—Ç–Ω–æ–µ:
        else:
            for i in range(0, len(buttons[index])-1, 2):
                category_keyboard.append([InlineKeyboardButton(buttons[index][i], callback_data = buttons[index][i]),
                            InlineKeyboardButton(buttons[index][i+1], callback_data = buttons[index][i+1])])
            category_keyboard.append([InlineKeyboardButton(buttons[index][len(buttons[index])-1], callback_data = buttons[index][len(buttons[index])-1])])
            if index != 0:
                category_keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="Main")])
            return category_keyboard
    keyboard = list()
    # ...–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Ñ—É–Ω–∫—Ü–∏—è.
    match category:
        case "default":
            keyboard = algorithm(0)
        case "–ë—É–ª—å–æ–Ω—ã –∏ —Å—É–ø—ã":
            keyboard = algorithm(1)
        case "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞":
            keyboard = algorithm(2)
        case "–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞":
            keyboard = algorithm(3)
        case "–°–∞–ª–∞—Ç—ã":
            keyboard = algorithm(4)
        case "–ö–æ–Ω—Å–µ—Ä–≤—ã":
            keyboard = algorithm(5)
        case "–ó–∞–∫—É—Å–∫–∏":
            keyboard = algorithm(6)
        case "–°–æ—É—Å—ã":
            keyboard = algorithm(7)
        case "–í—ã–ø–µ—á–∫–∞":
            keyboard = algorithm(8)
        case "–î–µ—Å–µ—Ä—Ç—ã":
            keyboard = algorithm(9)
        case "–í –∞—ç—Ä–æ–≥—Ä–∏–ª–µ":
            keyboard = algorithm(10)
        case "–ê–ª–∫–æ–≥–æ–ª—å":
            keyboard = algorithm(11)
        case "–ù–∞–ø–∏—Ç–∫–∏":
            keyboard = algorithm(12)
        case "–ö–∞—à–∏":
            keyboard = algorithm(13)
        case "–£–∫—Ä–∞—à–µ–Ω–∏—è":
            keyboard = algorithm(14)
        case "–í –ø–∞—Ä–æ–≤–∞—Ä–∫–µ":
            keyboard = algorithm(15)
        case "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã":
            keyboard = algorithm(16)
        case "–í –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–µ":
            keyboard = algorithm(17)
        case "–ú–∞—Ä–∏–Ω–∞–¥, –ø–∞–Ω–∏—Ä–æ–≤–∫–∞":
            keyboard = algorithm(18)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç 'InlineKeyboardMarkup', –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    category_markup = InlineKeyboardMarkup(keyboard)
    return category_markup

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
def subcategory_markups(subcategory: str) -> list:
    subcategory_keyboards = []
    for i in range(len(proreceip.subcategories[subcategory])):
        subcategory_keyboard = []
        for j in range(0,len(proreceip.subcategories[subcategory][i])):
            subcategory_keyboard.append([InlineKeyboardButton(proreceip.subcategories[subcategory][i][j],
                                                    callback_data=f"start.{subcategory}.{i}.{j}")])
        if i == 0:
            subcategory_keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="Main"),
                                                    InlineKeyboardButton("-->", callback_data="Next")])
        elif i == len(proreceip.subcategories[subcategory]) - 1:
            subcategory_keyboard.append([InlineKeyboardButton("<--", callback_data="Prev"),
                                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="Main")])
        else:
            subcategory_keyboard.append([InlineKeyboardButton("<--", callback_data="Prev"),
                                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="Main"),
                                                    InlineKeyboardButton("-->", callback_data="Next")])
        subcategory_keyboards.append(subcategory_keyboard)
    subcategory_markups = []
    for i in range(len(subcategory_keyboards)):
        subcategory_markups.append(InlineKeyboardMarkup(subcategory_keyboards[i]))
    return subcategory_markups

# –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∞–º–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞. –ë–µ–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
def recipe_markups(flag: str, step: int = None, length: int = None) -> list:
    keyboard = []
    match flag:
        case "start" | "start_random":
            keyboard.append([InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data = "ingredient")])
            markup = InlineKeyboardMarkup(keyboard)
            return markup
        case "ingredient" | "step":
            keyboard.append([InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É {step} –∏–∑ {length}", callback_data = "step")])
            markup = InlineKeyboardMarkup(keyboard)
            return markup


# –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥. –í—ã–¥–∞—ë—Ç –ø–µ—Ä–µ—á–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
async def default(update, _):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup = category_markups())
    return CHOOSING_CATEGORY

# –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
async def choice(update, _):
    query = update.callback_query
    variant = query.data
    await query.answer()
    await query.edit_message_text(text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {variant}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                    reply_markup = category_markups(variant))
    return CATEGORY

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞.
active_subcategory = list()
active_page = 0
active_variant = ""
cooking_flag = ""
current_step = 1
ingredient_triggered = False
data = dict()

# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
FINAL_MESSAGE = "\n\n–ù–∞ —ç—Ç–æ–º –≤—Å—ë... –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"
HINT = "\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"
HINT_END = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /begin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"

# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–ª–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç" –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
async def cooking(update, context):
    query = update.callback_query
    recipe = query.data.split('.')
    await query.answer()
    # "–ò–º–ø–æ—Ä—Ç" –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    global active_page, active_subcategory, active_variant
    global cooking_flag, current_step, ingredient_triggered, data
    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤—ã–±—Ä–∞–Ω —Ä–µ—Ü–µ–ø—Ç —Å–ª—É—á–∞–π–Ω–æ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.
    if recipe[0] == "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç":
        cooking_flag = "start_random"
    else:
        cooking_flag = recipe[0]
    match cooking_flag:
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–æ–π –≤–µ—Ä–Ω—É–ª–æ—Å—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        case "Main":
            active_subcategory.clear()
            active_variant = ""
            cooking_flag = ""
            current_step = 1
            active_page = 0
            ingredient_triggered = False
            data.clear()
            await query.edit_message_text(text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup = category_markups())
            return CHOOSING_CATEGORY
        # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ—Ü–µ–ø—Ç–æ–≤.
        case "Prev":
            active_page -= 1
            recipes = f"–†–µ—Ü–µ–ø—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {active_page+1} –∏–∑ {len(active_subcategory)}"
            await query.edit_message_text(text = recipes, reply_markup = active_subcategory[active_page])
            return COOKING
        # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ—Ü–µ–ø—Ç–æ–≤.
        case "Next":
            active_page += 1
            recipes = f"–†–µ—Ü–µ–ø—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {active_page+1} –∏–∑ {len(active_subcategory)}"
            await query.edit_message_text(text = recipes, reply_markup = active_subcategory[active_page])
            return COOKING
        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ—Ü–µ–ø—Ç–∞.
        case "start":
            rm = recipe_markups(cooking_flag)
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç URL —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è 'urlreceip'. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ—Ü–µ–ø—Ç–∞, –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
            receip = proreceip.urlreceip[recipe[1]][int(recipe[2])][int(recipe[3])]
            # –°–∫–∞—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å —Å–∞–π—Ç–∞
            data = findreceip(receip)
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            chatids[update.effective_chat.id]=data
            # –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç—É –≤ —Ñ–∞–π–ª ./Data/chatids.dat
            file=open("./Data/chatids.dat", "wb")
            pickle.dump(chatids, file)
            # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–∞
            title       = chatids[update.effective_chat.id]['title'].split(': ')
            description = chatids[update.effective_chat.id]['description']
            source      = chatids[update.effective_chat.id]['resource']
            message = title[1] + "\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n" + description + "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: " + source
            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
            print(title[0] + ": " + title[1] + ". –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: " + recipe[1])
            # –í—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç.
            await context.bot.send_photo(chat_id = update.effective_chat.id,
                                         photo = chatids[update.effective_chat.id]['image'],
                                         caption = message,
                                         reply_markup = rm)
            return COOKING
        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
        case "start_random":
            rm = recipe_markups(cooking_flag)
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ 'start', —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ.
            subcat = proreceip.keys[randint(0, 331)]
            receip = proreceip.urlreceip[subcat][randint(0, 2)][randint(0, 4)]
            # –°–∫–∞—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å —Å–∞–π—Ç–∞
            data = findreceip(receip)
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            chatids[update.effective_chat.id]=data
            # –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç—É –≤ —Ñ–∞–π–ª ./Data/chatids.dat
            file=open("./Data/chatids.dat", "wb")
            pickle.dump(chatids, file)
            # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–∞
            title       = chatids[update.effective_chat.id]['title'].split(': ')
            description = chatids[update.effective_chat.id]['description']
            source      = chatids[update.effective_chat.id]['resource']
            message = title[1] + "\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n" + description + "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: " + source
            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
            print(title[0] + ": " + title[1] + ". –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: " + subcat)
            await context.bot.send_photo(chat_id = update.effective_chat.id,
                                         photo = chatids[update.effective_chat.id]['image'],
                                         caption = message,
                                         reply_markup = rm)
            return COOKING
        # –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã".
        case "ingredient":
            if ingredient_triggered is False:
                rm = recipe_markups(cooking_flag, current_step, len(chatids[update.effective_chat.id])-6)
                # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id —á–∞—Ç–∞
                ingredients = chatids[update.effective_chat.id]['ingredients'].split("\n")
                # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                message = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
                for i in range(len(ingredients)):
                    message += f"{i+1}. " + ingredients[i] + "\n"
                message += HINT
                await context.bot.send_message(chat_id = update.effective_chat.id,
                                                text = message,
                                                reply_markup = rm)
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã 
                # –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                # –ù—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                # ingredient_triggered = True
                return COOKING
            return COOKING
        # –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É.
        case "step":
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_step_local = chatids[update.effective_chat.id]['current_step']
            # –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
            if current_step_local == len(chatids[update.effective_chat.id]) - 6:
                step_image = chatids[update.effective_chat.id][f"step{current_step_local}"][0]
                step_text = f"–®–∞–≥ {current_step_local}\n" + chatids[update.effective_chat.id][f"step{current_step_local}"][1] + FINAL_MESSAGE
                await context.bot.send_photo(chat_id = update.effective_chat.id,
                                             photo = step_image,
                                             caption = step_text)
                sleep(0.5)
                await context.bot.send_message(chat_id = update.effective_chat.id,
                                               text = HINT_END)
                active_subcategory.clear()
                active_variant = ""
                cooking_flag = ""
                current_step = 1
                active_page = 0
                ingredient_triggered = False
                return ConversationHandler.END
            else:
                rm = recipe_markups(cooking_flag, current_step_local+1, len(chatids[update.effective_chat.id])-6)
                # –ü–æ–ª—É—á–∞–µ—Ç —à–∞–≥–∏ –ø–æ id —á–∞—Ç–∞
                step_image = chatids[update.effective_chat.id][f"step{current_step_local}"][0]
                step_text = f"–®–∞–≥ {current_step_local}\n" + chatids[update.effective_chat.id][f"step{current_step_local}"][1]
                await context.bot.send_photo(chat_id = update.effective_chat.id,
                                             photo = step_image,
                                             caption = step_text,
                                             reply_markup = rm)
                # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                chatids[update.effective_chat.id]['current_step'] += 1
                file=open("./Data/chatids.dat", "wb")
                pickle.dump(chatids, file)
                return COOKING

# –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç".
async def category(update, _) -> int:
    query = update.callback_query
    variant = query.data
    await query.answer()
    global active_page, active_subcategory, active_variant
    match variant:
        case "Main":
            await query.edit_message_text(text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup = category_markups())
            return CHOOSING_CATEGORY
        case _:
            active_variant = variant
            active_subcategory = subcategory_markups(variant)
            message = f"–†–µ—Ü–µ–ø—Ç—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {variant}:\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {active_page+1} –∏–∑ {len(active_subcategory)}"
            await query.edit_message_text(text = message, reply_markup = active_subcategory[active_page])
            return COOKING

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global active_page, active_subcategory, active_variant
    global cooking_flag, current_step, ingredient_triggered
    active_subcategory.clear()
    active_variant = ""
    cooking_flag = ""
    current_step = 1
    active_page = 0
    ingredient_triggered = False
    data.clear()
    message = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ\n\n" + HINT_END
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    return ConversationHandler.END
